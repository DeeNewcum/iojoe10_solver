- A* is implemented, but it seems slow.
  Also, it doesn't seem to "dive towards the goal" like the Wikipedia article suggests.
        It seems to act more like breadth-first search.


- implement A* or similar

        - while it takes a lot of RAM, we can't do alpha-beta pruning,
            since this is a single-player game

    https://en.wikipedia.org/wiki/Combinatorial_optimization
    https://en.wikipedia.org/wiki/A*_search_algorithm#Variants_of_A.2A
        https://en.wikipedia.org/wiki/IDA*


    "A* search is one of the best general-purpose graph search algorithms when there's a way to
    estimate the distance to the goal"




    http://www.autonlab.org/tutorials/astar08.pdf
    http://www.gamasutra.com/view/feature/131724/smart_move_intelligent_.php?page=5
    http://www.youtube.com/playlist?list=PL473C810C4140E164

    articles with pseudocode, or have discussions of implementation details:
        https://en.wikipedia.org/wiki/A*_search_algorithm#Pseudocode
        http://www.policyalmanac.org/games/aStarTutorial.htm
        http://web.mit.edu/eranki/www/tutorials/search/
        http://theory.stanford.edu/~amitp/GameProgramming/ImplementationNotes.html


    https://metacpan.org/pod/List::PriorityQueue


- implement multiplication


- possible constant-time optimizations:

    - install Class::XSAccessor   (Moo says it can speed things up if this is installed)


- release to a few people:

    - contact the author, see if they're interested in this at all
            (it's very possible they have already built their own)

                https://twitter.com/10TheGame
                https://twitter.com/iojoetweets
                http://www.iojoe.com/about.html     simon @ iojoe.com


    - post in some other places:
                http://jayisgames.com/archives/2013/10/10.php



- Create a new series of boards for inclusion with the game, called "10 is Routing".
  The emphasis here is on path-finding / routing pieces through a path, and providing little
  structures that allow 1) pieces to exchange positions, 2) T-branches so they can go one way or the
  other, etc.

  The board Hard-13 is a great example of this kind of board.  However, it is a bit hard, and there
  should be a ramp-up in difficulty, levels that are a little less hard, for the player to learn
  from.


- attach a screenshot of the program working

    - use Github Pages to host the screenshot:   http://oli.jp/2011/github-pages-workflow/

    - Maybe I want to find some way to compress the solution listing though....
        make it wider.     Use Term::Readkey?   http://stackoverflow.com/a/1782149/1042525
        Or just assume it's 80 cols wide, in which case we can fit 5 boards wide...

